import * as THREE from 'three';
import {loadObjects, glbLoader, calculateThrust, calculateDrag, OBB, lerpEuler, calculateLinearIntegration}  from "./helper.js"


var forward = new THREE.Vector3(0, 0, -1)
var backward = new THREE.Vector3(0, 0, 1)

const defaultRotation = new THREE.Euler(3.14/2, 0, 3.14/2)


// 
// Plane class
class Plane {
	constructor(scene, modelUrl, id, crashHandler, finishedLoading = function () {}, errorLoading = function () {console.log("Error loading plane!")}) {
		this.modelUrl = modelUrl
		this.id = id
		this.scene = scene
		this.planeCamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 10000 );
		this.planeArr = []
		this.plane = null
		this.finishedLoading = finishedLoading // function after plane is loaded
		this.errorLoading = errorLoading // function if there is error while loading

		// movement variables
		this.thrustLevel = 0
		this.goalThrustLevel = 0
		this.velocity = new THREE.Vector3(0,0,0)
		this.acceleration = new THREE.Vector3(0,0,0)
		this.e = new THREE.Vector3(0,0,0)

		this.targetRotation = new THREE.Euler(0, 0, 0)
		this.rotation = new THREE.Euler(0, 0, 0)

		this.onRunway = false
		this.crashHandler = crashHandler
		this.airspeed = 0
		this.oldPos = new THREE.Vector3()
	}

	// setup plane and camera
	planeLoadingDone() {
		this.plane = this.planeArr[0].scene.children[0]

		// change material from MeshPhysicalMaterial to MeshBasicMaterial
		const targetMaterial = new THREE.MeshBasicMaterial({ map: this.plane.children[0].material.map });
		targetMaterial.map.needsUpdate = true;
		this.plane.children[0].material = targetMaterial;

		// Initialize plane and camera
		this.plane.scale.set(0.001 * 32, 0.001 * 32, 0.001 * 32);
		this.plane.position.set(0, 40, 0);
		this.plane.rotation.setFromQuaternion(this.rotation)
		console.log(this.plane)
		this.scene.add(this.plane);


		this.planeCamera.position.set(this.plane.position.x, this.plane.position.y + 48, this.plane.position.z + 64);
		this.planeCamera.rotation.x = -3.14 / 8;
		console.log(this.plane)

		this.frontGearBox = new OBB(
			new THREE.Vector3(this.plane.position.x, this.plane.position.y + 0.5, this.plane.position.z),
			new THREE.Vector3(1, 1, 1), 
			new THREE.Euler(),
			this.scene
		)

		this.backGearBox = new OBB(
			new THREE.Vector3(this.plane.position.x, this.plane.position.y + 0.5, this.plane.position.z + 2),
			new THREE.Vector3(8, 2, 2), 
			new THREE.Euler(),
			this.scene
		)

		this.wingBox = new OBB(
			new THREE.Vector3(this.plane.position.x, this.plane.position.y + 6, this.plane.position.z + 0.5),
			new THREE.Vector3(35, 1, 6), 
			new THREE.Euler(),
			this.scene
		)

		this.tailBox = new OBB(
			new THREE.Vector3(this.plane.position.x, this.plane.position.y + 5, this.plane.position.z + 16),
			new THREE.Vector3(10, 6, 6), 
			new THREE.Euler(),
			this.scene
		)

		this.bodyBox = new OBB(
			new THREE.Vector3(this.plane.position.x, this.plane.position.y + 4, this.plane.position.z + 2),
			new THREE.Vector3(6, 5, 20), 
			new THREE.Euler(),
			this.scene
		)

		this.finishedLoading() 
	}

	// load plane
	async initPlane() {
		loadObjects(glbLoader, 
		[this.modelUrl], 
		[this.id], 
		this.planeArr
		).then(() => this.planeLoadingDone(), () => this.errorLoading())
	}

	/* Movement Functions */
 
	// change level of thrust
	changeThrust(newVal) {
		this.goalThrustLevel = Math.min(Math.max(newVal, 0), 1);
	}

	changeRotation(rotationChange) {
		this.targetRotation.copy(new THREE.Euler(this.targetRotation.x + rotationChange.x, this.targetRotation.y + rotationChange.z, this.targetRotation.z + rotationChange.y))
		var forward = new THREE.Vector3(0, 0, -1)
		var backward = new THREE.Vector3(0, 0, 1)
		forward.applyEuler(new THREE.Euler(this.rotation.x, this.rotation.z, this.rotation.y))
		backward.applyEuler(new THREE.Euler(this.rotation.x, this.rotation.z, this.rotation.y))
	}

	// update plane position and velocity
	update(sps, r) {
		this.oldPos = this.plane.position.clone()
		var fps = sps
		var vb = this.velocity.length()

		var ab = this.acceleration.length()
		this.acceleration = new THREE.Vector3(0,0,0)

		this.thrustLevel += (this.goalThrustLevel - this.thrustLevel) * 0.1

		var thrustForce = this.thrustLevel * 3000;
		this.acceleration.add(calculateThrust(thrustForce, 400, forward));

		var dragAccel = calculateDrag(400, this.velocity.length(), 0.001, 174, backward)
		this.acceleration.add(dragAccel);

		if (!this.onRunway) {
			this.acceleration.y = -9.8
		}

		var an = this.acceleration.length()
		var m_acceleration = (an-ab)
		var integratedFactor = calculateLinearIntegration(m_acceleration, ab, 1/fps)

		var frameAcceleration = this.acceleration.clone();
		frameAcceleration.normalize()
		frameAcceleration.multiplyScalar(integratedFactor)
		this.e.add(frameAcceleration)

		this.velocity.add(frameAcceleration)

		var vn = this.velocity.length()
		var m = (vn-vb)
		var integratedFactor = calculateLinearIntegration(m, vb, 1/fps)

		var frameVelocity = this.velocity.clone();
		frameVelocity.normalize()
		frameVelocity.multiplyScalar(integratedFactor)

		
		var oldRotation = this.rotation.clone()
		lerpEuler(this.rotation, this.targetRotation, 0.9 * 1 / fps)
		lerpEuler(oldRotation, this.targetRotation, -0.9 * 1 / fps)
		this.updateRelativeObjects();

		let iVelocity = frameVelocity.clone().multiplyScalar(0.1)

		for (let i = 0; i < 10; i++) {
			this.plane.position.add(iVelocity);

			let gear1 = this.frontGearBox.checkMeshColliding(r) 
			let gear2 = this.backGearBox.checkMeshColliding(r)
			let crash1 = (this.wingBox.checkMeshColliding(r).collides || this.bodyBox.checkMeshColliding(r).collides)
			let tailstrike = this.tailBox.checkMeshColliding(r)


			if (gear2.collides) {
				this.onRunway = true 
				this.plane.position.y = 20.5
			} else {
				this.onRunway = false
			}

			if (gear1.collides) {
				let pass = false
				for (let x = 0; x < 5; x++) {
					this.plane.position.y += 0.02
					let gear1 = this.frontGearBox.checkMeshColliding(r, frameVelocity)
					if (!gear1.collides) {
						pass = true
						break;
					}
				}
				if (!pass) {
					this.rotation.x = oldRotation.x
					this.targetRotation.x = oldRotation.x
					this.updateRelativeObjects()
					let gear1 = this.frontGearBox.checkMeshColliding(r, frameVelocity)
					if (gear1.collides) {
						this.crashHandler()
						break;
					}
				}
				
			}


			if (tailstrike.collides) {
				this.rotation.copy(oldRotation)
				this.targetRotation.copy(oldRotation)
				this.updateRelativeObjects()
				let tailstrike = this.tailBox.checkMeshColliding(r, frameVelocity)
				if (tailstrike.collides) {
					this.crashHandler()
					break;
				}
			}

			if (crash1) {
				this.crashHandler()
				break;
			}

		}
		this.updateRelativeObjects()
		this.plane.rotation.copy(new THREE.Euler(this.rotation.x - defaultRotation.x, this.rotation.y - defaultRotation.y, this.rotation.z - defaultRotation.z))
		this.airspeed = new THREE.Vector3().subVectors(this.plane.position, this.oldPos).length() * fps

	}

	updateRelativeObjects() {
		// this.planeCamera.position.set(this.plane.position.x + 40, this.plane.position.y + 10, this.plane.position.z + 0);
		// this.planeCamera.rotation.x = 0
		// this.planeCamera.rotation.y = 1.5707

		this.planeCamera.position.set(this.plane.position.x, this.plane.position.y + 32, this.plane.position.z + 64);

		const relativeRotation = new THREE.Euler(this.rotation.x, this.rotation.z, -this.rotation.y)


		this.frontGearBox.setOrientation(
			new THREE.Vector3(this.plane.position.x, this.plane.position.y + 1.25, this.plane.position.z - 5.5),
			relativeRotation,
			this.plane.position
		);

		this.backGearBox.setOrientation(
			new THREE.Vector3(this.plane.position.x, this.plane.position.y + 0.5, this.plane.position.z),
			relativeRotation,
			this.plane.position
		); 

		this.wingBox.setOrientation(
			new THREE.Vector3(this.plane.position.x, this.plane.position.y + 6, this.plane.position.z + 0.5),
			relativeRotation,
			this.plane.position
		);

		this.tailBox.setOrientation(
			new THREE.Vector3(this.plane.position.x, this.plane.position.y + 5, this.plane.position.z + 16),
			relativeRotation,
			this.plane.position
		);

		this.bodyBox.setOrientation(
			new THREE.Vector3(this.plane.position.x, this.plane.position.y + 5, this.plane.position.z + 2),
			relativeRotation,
			this.plane.position
		); 
	}


}

export {Plane};